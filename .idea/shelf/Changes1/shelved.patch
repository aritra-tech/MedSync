Index: app/src/main/java/com/aritra/medsync/domain/repository/MedicationRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.aritra.medsync.domain.repository\n\nimport com.aritra.medsync.domain.model.Medication\nimport kotlinx.coroutines.flow.Flow\n\ninterface MedicationRepository {\n\n    suspend fun insertMedications(medication: List<Medication>)\n\n    suspend fun updateMedication(medication: Medication)\n\n    fun getAllMedications(): Flow<List<Medication>>\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/aritra/medsync/domain/repository/MedicationRepository.kt b/app/src/main/java/com/aritra/medsync/domain/repository/MedicationRepository.kt
--- a/app/src/main/java/com/aritra/medsync/domain/repository/MedicationRepository.kt	(revision a64601f718946627b8aba9b97385ce0a0a008f10)
+++ b/app/src/main/java/com/aritra/medsync/domain/repository/MedicationRepository.kt	(date 1739851366236)
@@ -10,4 +10,6 @@
     suspend fun updateMedication(medication: Medication)
 
     fun getAllMedications(): Flow<List<Medication>>
+
+    suspend fun resetAllMedication()
 }
\ No newline at end of file
Index: app/src/main/java/com/aritra/medsync/data/dao/MedicationDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.aritra.medsync.data.dao\n\nimport androidx.room.Dao\nimport androidx.room.Insert\nimport androidx.room.OnConflictStrategy\nimport androidx.room.Query\nimport androidx.room.Update\nimport com.aritra.medsync.domain.model.Medication\nimport kotlinx.coroutines.flow.Flow\n\n@Dao\ninterface MedicationDao {\n\n    @Query(\"SELECT * FROM medication WHERE id = :medicationId\")\n    suspend fun getMedicationById(medicationId: Int) : Medication\n\n    @Query(\"SELECT * FROM medication\")\n    fun getAllMedications() : Flow<List<Medication>>\n\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insertMedication(medicationModel: Medication): Long\n\n    @Update(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun updateMedication(medicationModel: Medication)\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/aritra/medsync/data/dao/MedicationDao.kt b/app/src/main/java/com/aritra/medsync/data/dao/MedicationDao.kt
--- a/app/src/main/java/com/aritra/medsync/data/dao/MedicationDao.kt	(revision a64601f718946627b8aba9b97385ce0a0a008f10)
+++ b/app/src/main/java/com/aritra/medsync/data/dao/MedicationDao.kt	(date 1739851343234)
@@ -22,4 +22,7 @@
 
     @Update(onConflict = OnConflictStrategy.REPLACE)
     suspend fun updateMedication(medicationModel: Medication)
+
+    @Query("UPDATE medication SET isTaken = 0")
+    suspend fun resetAllMedicationStatus()
 }
\ No newline at end of file
Index: app/src/main/java/com/aritra/medsync/domain/repository/MedicationRepositoryImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.aritra.medsync.domain.repository\n\nimport com.aritra.medsync.data.dao.MedicationDao\nimport com.aritra.medsync.domain.model.Medication\nimport kotlinx.coroutines.flow.Flow\n\nclass MedicationRepositoryImpl(\n    private val dao: MedicationDao\n) : MedicationRepository {\n    override suspend fun insertMedications(medication: List<Medication>) {\n        medication.forEach { dao.insertMedication(it) }\n    }\n\n    override suspend fun updateMedication(medication: Medication) {\n        dao.updateMedication(medication)\n    }\n\n    override fun getAllMedications(): Flow<List<Medication>> {\n        return dao.getAllMedications()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/aritra/medsync/domain/repository/MedicationRepositoryImpl.kt b/app/src/main/java/com/aritra/medsync/domain/repository/MedicationRepositoryImpl.kt
--- a/app/src/main/java/com/aritra/medsync/domain/repository/MedicationRepositoryImpl.kt	(revision a64601f718946627b8aba9b97385ce0a0a008f10)
+++ b/app/src/main/java/com/aritra/medsync/domain/repository/MedicationRepositoryImpl.kt	(date 1739851379736)
@@ -18,4 +18,8 @@
     override fun getAllMedications(): Flow<List<Medication>> {
         return dao.getAllMedications()
     }
+
+    override suspend fun resetAllMedication() {
+        dao.resetAllMedicationStatus()
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/HomeScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.aritra.medsync.ui.screens.homeScreen\n\nimport android.Manifest\nimport android.content.pm.PackageManager\nimport android.os.Build\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.outlined.Add\nimport androidx.compose.material3.FloatingActionButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.unit.dp\nimport androidx.core.content.ContextCompat\nimport com.aritra.medsync.R\nimport com.aritra.medsync.components.MedSyncEmptyState\nimport com.aritra.medsync.components.MedSyncProgressCard\nimport com.aritra.medsync.components.MedicationCard\nimport com.aritra.medsync.ui.screens.homeScreen.viewmodel.HomeViewModel\nimport com.aritra.medsync.ui.screens.intro.UserData\nimport com.aritra.medsync.ui.theme.OnPrimaryContainer\nimport com.aritra.medsync.ui.theme.PrimarySurface\nimport com.aritra.medsync.ui.theme.bold22\nimport com.aritra.medsync.ui.theme.medium24\nimport com.aritra.medsync.utils.Utils\n\n\n@Composable\nfun HomeScreen(\n    userData: UserData?,\n    onFabClicked: () -> Unit,\n    navigateToUpdateScreen: (medicineID: Int) -> Unit,\n    homeViewModel: HomeViewModel\n) {\n    val context = LocalContext.current\n    val medication = homeViewModel.medicationModel\n    val greetingText = Utils.greetingText()\n    var hasNotificationPermission by remember {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n            mutableStateOf(\n                ContextCompat.checkSelfPermission(\n                    context,\n                    Manifest.permission.POST_NOTIFICATIONS\n                ) == PackageManager.PERMISSION_GRANTED\n            )\n        } else {\n            mutableStateOf(true)\n        }\n    }\n    val permissionLauncher = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.RequestPermission(),\n        onResult = { isGranted ->\n            hasNotificationPermission = isGranted\n        }\n    )\n\n    LaunchedEffect(Unit) {\n        homeViewModel.getMedications()\n    }\n\n    LaunchedEffect(Unit) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n            permissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)\n        }\n    }\n\n    Scaffold(\n        floatingActionButton = {\n            FloatingActionButton(\n                modifier = Modifier.padding(vertical = 90.dp),\n                onClick = { onFabClicked() }\n            ) {\n                Icon(\n                    imageVector = Icons.Outlined.Add,\n                    contentDescription = \"Add Meds\"\n                )\n            }\n        },\n    ) { paddingValues ->\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .background(PrimarySurface)\n                .padding(paddingValues)\n                .verticalScroll(rememberScrollState())\n                .padding(16.dp)\n        ) {\n            Row(\n                modifier = Modifier.fillMaxWidth()\n            ) {\n                Text(\n                    text = greetingText,\n                    style = bold22\n                )\n\n                Spacer(modifier = Modifier.width(4.dp))\n\n                if (userData?.username != null) {\n                    Text(\n                        text = userData.username,\n                        style = medium24\n                    )\n                }\n            }\n\n            Spacer(modifier = Modifier.height(30.dp))\n\n            MedSyncProgressCard(medication)\n\n            Spacer(modifier = Modifier.height(30.dp))\n\n            Text(\n                text = stringResource(R.string.medications),\n                style = medium24,\n                color = OnPrimaryContainer\n            )\n\n            Spacer(modifier = Modifier.height(15.dp))\n\n            if (medication.isEmpty().not()) {\n                Column(\n                    modifier = Modifier.padding(bottom = 90.dp),\n                    verticalArrangement = Arrangement.spacedBy(16.dp)\n                ) {\n                    medication.forEach { med ->\n                        MedicationCard(medication = med)\n                    }\n                }\n            } else {\n                MedSyncEmptyState(\n                    stateTitle = \"\",\n                    stateDescription = \"\",\n                    R.raw.empty_box_animation\n                )\n            }\n        }\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/HomeScreen.kt b/app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/HomeScreen.kt
--- a/app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/HomeScreen.kt	(revision a64601f718946627b8aba9b97385ce0a0a008f10)
+++ b/app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/HomeScreen.kt	(date 1739854812392)
@@ -3,6 +3,7 @@
 import android.Manifest
 import android.content.pm.PackageManager
 import android.os.Build
+import android.widget.Toast
 import androidx.activity.compose.rememberLauncherForActivityResult
 import androidx.activity.result.contract.ActivityResultContracts
 import androidx.compose.foundation.background
@@ -56,6 +57,7 @@
 ) {
     val context = LocalContext.current
     val medication = homeViewModel.medicationModel
+    val wasReset = homeViewModel.wasReset
     val greetingText = Utils.greetingText()
     var hasNotificationPermission by remember {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
@@ -76,6 +78,16 @@
         }
     )
 
+    LaunchedEffect(wasReset) {
+        if (wasReset) {
+            Toast.makeText(
+                context,
+                "Medications have been reset for the new day",
+                Toast.LENGTH_SHORT
+            ).show()
+        }
+    }
+
     LaunchedEffect(Unit) {
         homeViewModel.getMedications()
     }
Index: app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/viewmodel/HomeViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.aritra.medsync.ui.screens.homeScreen.viewmodel\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport com.aritra.medsync.domain.extensions.runIO\nimport com.aritra.medsync.domain.model.Medication\nimport com.aritra.medsync.ui.screens.homeScreen.usecase.FetchMedicationUseCase\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport javax.inject.Inject\n\n@HiltViewModel\nclass HomeViewModel @Inject constructor(\n    private val fetchMedicationUseCase: FetchMedicationUseCase\n) : ViewModel() {\n\n    var medicationModel by mutableStateOf(emptyList<Medication>())\n\n    fun getMedications() = runIO {\n        fetchMedicationUseCase.getAllMedications().collect { response ->\n            medicationModel = response\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/viewmodel/HomeViewModel.kt b/app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/viewmodel/HomeViewModel.kt
--- a/app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/viewmodel/HomeViewModel.kt	(revision a64601f718946627b8aba9b97385ce0a0a008f10)
+++ b/app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/viewmodel/HomeViewModel.kt	(date 1739854634603)
@@ -4,10 +4,15 @@
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.setValue
 import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
 import com.aritra.medsync.domain.extensions.runIO
 import com.aritra.medsync.domain.model.Medication
 import com.aritra.medsync.ui.screens.homeScreen.usecase.FetchMedicationUseCase
 import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.Job
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.launch
+import java.util.Calendar
 import javax.inject.Inject
 
 @HiltViewModel
@@ -16,10 +21,53 @@
 ) : ViewModel() {
 
     var medicationModel by mutableStateOf(emptyList<Medication>())
+    private var resetJob: Job? = null
+
+    // State to track if medications were reset
+    var wasReset by mutableStateOf(false)
+        private set
+
+    private fun setupDailyReset() {
+        resetJob?.cancel()
+        resetJob = viewModelScope.launch {
+            while (true) {
+                val now = Calendar.getInstance()
+                val nextReset = Calendar.getInstance().apply {
+                    set(Calendar.HOUR_OF_DAY, 0)  // Midnight
+                    set(Calendar.MINUTE, 0)
+                    set(Calendar.SECOND, 0)
+                    set(Calendar.MILLISECOND, 0)
+                    add(Calendar.DAY_OF_YEAR, 1) // Next day
+                }
+
+                // Calculate delay until next reset
+                val delayMillis = nextReset.timeInMillis - now.timeInMillis
+                delay(delayMillis)
+
+                // Perform reset
+                resetMedicationList()
+            }
+        }
+    }
+
+    private suspend fun resetMedicationList() {
+        runIO {
+            fetchMedicationUseCase.resetAllMedication()
+            wasReset = true
+            // Reset flag after a short delay
+            delay(5000) // 5 seconds
+            wasReset = false
+        }
+    }
 
     fun getMedications() = runIO {
         fetchMedicationUseCase.getAllMedications().collect { response ->
             medicationModel = response
         }
     }
+
+    override fun onCleared() {
+        super.onCleared()
+        resetJob?.cancel()
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/usecase/FetchMedicationUseCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.aritra.medsync.ui.screens.homeScreen.usecase\n\nimport com.aritra.medsync.domain.model.Medication\nimport com.aritra.medsync.domain.repository.MedicationRepository\nimport kotlinx.coroutines.flow.Flow\nimport javax.inject.Inject\n\nclass FetchMedicationUseCase @Inject constructor(\n    private val repository: MedicationRepository\n) {\n\n    fun getAllMedications(): Flow<List<Medication>> {\n        return repository.getAllMedications()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/usecase/FetchMedicationUseCase.kt b/app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/usecase/FetchMedicationUseCase.kt
--- a/app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/usecase/FetchMedicationUseCase.kt	(revision a64601f718946627b8aba9b97385ce0a0a008f10)
+++ b/app/src/main/java/com/aritra/medsync/ui/screens/homeScreen/usecase/FetchMedicationUseCase.kt	(date 1739854622563)
@@ -12,4 +12,8 @@
     fun getAllMedications(): Flow<List<Medication>> {
         return repository.getAllMedications()
     }
+
+    suspend fun resetAllMedication() {
+        return repository.resetAllMedication()
+    }
 }
\ No newline at end of file
